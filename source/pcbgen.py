######################################################################
######################################################################
# Description
######################################################################
######################################################################

######################################################################
######################################################################
# Imports
######################################################################
######################################################################
import sys
import argparse
import json
import os
import datetime
import pcbnew

######################################################################
######################################################################
# Global Definitions and Variables
######################################################################
######################################################################
args = []
keyUnits = []
DIODE_OFFSET_MM = {
    "x_offset" : 0,
    "y_offset" : 9.525
}
RESISTOR_OFFSET_MM = [0,0]
LED_OFFSET_MM = [0,0]

PROG_VERSION_NUMBER = 0.1

######################################################################
######################################################################
# Functions
######################################################################
######################################################################

def unitSpacing2MM(unit):
    """ Converts KLE unit spacing into wxPoint spacing. Used in placing KiCAD components """
    unitSpacing = 19.050000
    wxConversionFactor = 1000000

    return unit*unitSpacing


def parseCmdArgs():
    """ Parses the incoming command-line arguments """

    parser = argparse.ArgumentParser(
        prog="pcbgen",
        description="Create a Skidl netlist using a key layout file generated by jsongen.py"
    )
    parser.add_argument(
        "layout_file",
        help='The JSON file denoted as .kle_json'
    )
    parser.add_argument(
        "config_file",
        help='The JSON file containing keyswitch settings, denoted as .config_json'
    )
    parser.add_argument(
        "pcb_file",
        help="The KiCAD file created using the generated netlist"
    )
    parser.add_argument(
        "-v", "--version", action="version", version="Version " + str(PROG_VERSION_NUMBER),
        help='Displays version number of program'
    )
    parser.add_argument(
        "output_name",
        help='The base name of all output files'
    )
    args = parser.parse_args()

    if not (args.layout_file):
        parser.error(
            "\nLayout file missing. Use '-h' for more information"
        )
    if not (args.pcb_file):
        parser.error(
            "\nPCB file missing. Use '-h' for more information"
        )
    if not (args.config_file):
        parser.error(
            "\nConfig file missing. Use '-h' for more information"
        )

    return args


######################################################################
######################################################################
# Classes
######################################################################
######################################################################
        
######################################################################
######################################################################
# Main Program Entry
######################################################################
######################################################################

def main(argv):
    """ Main entry for the program """

    # Load the layout and config files
    try:
        configFile = open(args.config_file, "r")
        layoutFile = open(args.layout_file, "r")
        layout = json.load(layoutFile)

        for key, item in enumerate(layout):
            tmpKey = json.loads(item)
            keyUnits.append(tmpKey)

        config = json.load(configFile)

    except OSError as err:
        print("Error opening the input files")
        exit()
    except ValueError as err:
        print(err + ": Failed to process JSON files. Exiting...")
        exit()
    except OSError as err:
        print(err + ": Failed to open input files. Exiting...")
        exit()

    # Load the board files
    board = pcbnew.LoadBoard(args.pcb_file)

    # Place components on a per-key basis
    for key, item in enumerate(keyUnits):
        x_coor = unitSpacing2MM(item["x_unit"])
        y_coor = unitSpacing2MM(item["y_unit"])
        print(x_coor, y_coor)

        for module in board.GetModules():

            # Place the keyswitch
            ref = "K" + str(item['num'])
            if module.GetReference() == ref:
                module.SetPosition(pcbnew.wxPointMM(float(x_coor), float(y_coor)))

            # Place the diode
            ref = "D" + str(item['num'])
            diode_x = x_coor + DIODE_OFFSET_MM["x_offset"]
            diode_y = y_coor + DIODE_OFFSET_MM["y_offset"]

            if module.GetReference() == ref:
                module.SetPosition(pcbnew.wxPointMM(float(diode_x), float(diode_y)))

    # Save new board
    board.Save("mod_" + args.output_name + ".kicad_pcb")

    return 0

if __name__ == "__main__":
    args = parseCmdArgs()
    main(args)